# -*- coding: utf-8 -*-
"""Housing Price Prediction .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X99mep7eqBYuy3gurCIWNzQNRnCBrZoP

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Importing the Boston House Price DataSet"""

house_price_dataset = sklearn.datasets.load_boston()

print(house_price_dataset)

# Loading the datasets  to a Pandas Dataframe
house_price_dataframe  = pd.DataFrame(house_price_dataset.data,columns=house_price_dataset.feature_names)

#Print First 5 rows of our DataFrame
house_price_dataframe.head()

# add the target column to the dataframe
house_price_dataframe['price'] = house_price_dataset.target

house_price_dataframe.head()

#checking the nummber of rows and columns in the dataframe
house_price_dataframe.shape

#checking for missing values
house_price_dataframe.isnull().sum()

#statistical measure of the data
house_price_dataframe.describe()

"""Understanding the corelation between various features in dataset

1. Postive Corelation

2. Negative Corelation
"""

correlation = house_price_dataframe.corr()

#constructing a heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar = True,square = True, fmt = '.1f',annot = True,annot_kws ={'size':8},cmap ='Blues')

"""Splitting the Data and the Target"""

X = house_price_dataframe.drop(['price'], axis =1)
Y = house_price_dataframe['price']

print(X)
print(Y)

"""Splitting the Datainto Training data and Test Data"""

X_train, X_test,Y_train, Y_test = train_test_split(X,Y,test_size = 0.2,random_state = 2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training"""

#loading the model
 model = XGBRegressor()

#tarining the model with X_train 
model.fit(X_train,Y_train)

"""Evaluation

Prediction on training data
"""

#accuracy on preduiction on training data
training_data_prediction = model.predict(X_train)

print(training_data_prediction)

# Rsquared error
score_1  =metrics.r2_score(Y_train,training_data_prediction)
# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_train,training_data_prediction)

print("R squared error: ",score_1)
print("Mean Absolute error: ",score_2)

"""Visualizing the actual Prices and predicted prices

"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

"""Prediction on Test Data"""

#accuracy on preduiction on test data
test_data_prediction = model.predict(X_test)

# Rsquared error
score_1  =metrics.r2_score(Y_test,test_data_prediction)
# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_test,test_data_prediction)

print("R squared error: ",score_1)
print("Mean Absolute error: ",score_2)

